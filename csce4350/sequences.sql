/*
    In some databases, they're called "AUTONUMBER"... think "automatically numbered"
    In Microsoft Access, that's what they're called.
    
    In modern databases, they're called an IDENTITY column.
    
    https://www.postgresql.org/docs/current/ddl-identity-columns.html
*/    
    CREATE TABLE people 
    (
        p_id BIGINT GENERATED ALWAYS AS IDENTITY,
        
        /* ... */
        
        CONSTRAINT people_pk PRIMARY KEY(p_id)
    );
    
    
    -- Or, it could be:
    
    CREATE TABLE people 
    (
        p_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
        
        /* ... */
        
        CONSTRAINT people_pk PRIMARY KEY(p_id)
    );
    
/*
    An identity column doesn't have to be a BIGINT; however, they
    frequently are.  Sometimes they're INTEGER.  I suppose they could be
    SMALLINT.  The ALWAYS and BY DEFAULT should be obvious... "ALWAYS"
    means that a user may not insert chosen values; "BY DEFAULT" means
    that, if a value isn't specified, then the generated value is used.
    
    -----------------------------------------------------------------
    
    There is a different approach preferred by your instructor:  This is
    the idea of an explicit SEQUENCE.
*/

    DROP SEQUENCE IF EXISTS seq_pk;
    
    CREATE SEQUENCE seq_pk AS BIGINT;
    
/*
    Now, we have a lot of options with an explicit sequence:
    
    https://www.postgresql.org/docs/current/sql-createsequence.html
    
    We may begin with any value, go in either direction, increment (or
    decrement) by integral values besides one... even generate random
    values; however, these tend to be expensive because they must be unique.
    
    Think of it as a roll in a busy bakery: "Please Take a Number for Service"
    
    To "take a number"
*/
    SELECT NEXTVAL('seq_pk');
/*
    Now, the syntax here will vary across databases, but it's always NEXTVAL
    
    For example: in Oracle (and others) it's: SELECT seq_pk.NEXTVAL();
    
    The "AS BIGINT" is optional because BIGINT is the default; "AS INT" causes
    it to generate integers.
*/

    CREATE TABLE tbl_people 
    (
        fld_p_id BIGINT DEFAULT NEXTVAL('seq_pk'),
        
        /* ... */
        
        CONSTRAINT people_pk PRIMARY KEY(p_id)
    );
    
/*
    There are pros & cons to either method.  An IDENTITY column
    is simpler; the SEQUENCE creates a dependency wherein you
    must drop the table before it will allow you to drop the sequence.
    (That, or use CASCADE!)
    
    OTOH, I can generate PKs for a group of tables using only one
    sequence or I can generate a key with various fields by using
    multiple sequences creatively.
*/
    
    